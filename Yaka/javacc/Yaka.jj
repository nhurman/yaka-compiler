/*
 * Auteur: Pedrono Marie-Jo
 * création : 13 février 2002
 * nature : projet etudiant
 */

options{
	JDK_VERSION="1.5";
}

PARSER_BEGIN(Yaka)

package Yaka.javacc;

import Yaka.*;
import Yaka.Exception.YakaException;

public class Yaka {
  public static Declaration declaration;
  public static Expression expression;
  public static TabIdent tabIdent;

  public static void init()
  {
    tabIdent = new TabIdent(10);
    declaration = new Declaration(tabIdent);
    expression = new Expression();
  }

  public static void main(String args[])
  {
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      init();
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
      System.out.println(declaration.toString() + "\n");
      System.out.println(expression.toString());
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    } catch (YakaException e) {
      System.out.println("Erreur de compilation : " + e.toString());
    }
  }
}

PARSER_END(Yaka)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS:
{
  public static String identLu, chaineLue;
  public static int entierLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);}
}


/* Mots réservés*/
TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ >
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() throws YakaException : {}
{
   <PROGRAMME> <ident>
   bloc()
   <FPROGRAMME>
}

void bloc() throws YakaException : {}{
 (declConst())*
 (declVar())*
   suiteExpr()
}

void declConst() throws YakaException : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() throws YakaException : {}
{
  <ident> { declaration.constant(YakaTokenManager.identLu); }

  "=" valConst()
}

void valConst() throws YakaException : {}{
  <entier> { declaration.constant(Ident.Type.Integer, YakaTokenManager.entierLu); }
 | <ident> { declaration.constant(tabIdent.find(YakaTokenManager.identLu)); }
 | <VRAI>  { declaration.constant(Ident.Type.Boolean, true); }
 | <FAUX>  { declaration.constant(Ident.Type.Boolean, false); }
}


void declVar() throws YakaException : {}
{
  <VAR> type()
  <ident> { declaration.variable(YakaTokenManager.identLu); }
  (","
      <ident> { declaration.variable(YakaTokenManager.identLu); }
  )* ";"

}

void type() : {}
{
   <ENTIER>  { declaration.variable(Ident.Type.Integer); }
 | <BOOLEEN> { declaration.variable(Ident.Type.Boolean); }
}

/*
 * Syntaxe des instructions.
 */
void suiteExpr() throws YakaException : {}
{ (expression() (";" (expression())? )*)? }


/*
 * Expression.
 */
void expression() throws YakaException : {}
{
  simpleExpr()
  (
    opRel()
    simpleExpr() { expression.operation(); }
  )?
}

void simpleExpr() throws YakaException : {}
{
   terme()
   (
    opAdd()
    terme() { expression.operation(); }
   )*
}

void terme() throws YakaException : {}
{
  facteur()
  (
    opMul()
    facteur() { expression.operation(); }
  )*
}

void facteur() throws YakaException : {}
{
   primaire()
 | opNeg() primaire()
}

void primaire () throws YakaException: {}
{
   valeur()
 | "(" expression() ")"

}

void valeur () throws YakaException : {}
{
   <entier> { expression.push(Ident.Type.Integer); }
 | <ident> { expression.push(tabIdent.find(YakaTokenManager.identLu)); }
 | <VRAI> { expression.push(Ident.Type.Boolean); }
 | <FAUX> { expression.push(Ident.Type.Boolean); }

}

void opRel() : {}
{
   "="  { expression.push(Expression.Operator.Equals); }
 | "<>" { expression.push(Expression.Operator.NEquals); }
 | "<"  { expression.push(Expression.Operator.Lower); }
 | "<=" { expression.push(Expression.Operator.LowerE); }
 | ">"  { expression.push(Expression.Operator.Greater); }
 | ">=" { expression.push(Expression.Operator.GreaterE); }
}

void opAdd() : {}
{
    "+" { expression.push(Expression.Operator.Plus); }
  | "-" { expression.push(Expression.Operator.Minus); }
  | <OU> { expression.push(Expression.Operator.Or); }
}

void opMul() : {}
{
    "*" { expression.push(Expression.Operator.Times); }
  | "/" { expression.push(Expression.Operator.Div); }
  | <ET> { expression.push(Expression.Operator.And); }
}

void opNeg() : {}
{ "-"
 | <NON>
}


