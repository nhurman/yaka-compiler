/*
 * Auteur: Pedrono Marie-Jo
 * création : 13 février 2002
 * nature : projet etudiant
 */

options{
  JDK_VERSION="1.5";
  STATIC=false;
}

PARSER_BEGIN(Yaka)

package YakaC.javacc;

import YakaC.*;
import YakaC.Parser.*;
import YakaC.Target.*;
import YakaC.Exception.YakaException;

public class Yaka
{
  protected YakaC.Event.EventManager m_eventManager;
  protected ErrorBag     m_errors;
  protected TabIdent     m_tabIdent;
  protected TypeChecker  m_typeChecker;
  protected Declaration  m_declaration;
  protected Expression   m_expression;
  protected Affectation  m_affectation;
  protected EntreeSortie m_entreeSortie;
  protected Iteration    m_iteration;
  protected Branching    m_branching;

  public static enum Event implements YakaC.Event.Event
  {
    ProgramStart,
    ProgramEnd,
    InstructionsStart,
    Operation,

    Integer,
    Identifier,
    Boolean;
  }

  public void init()
  {
    m_eventManager = new YakaC.Event.EventManager();
    m_errors = new ErrorBag(this, m_eventManager, false);
    m_tabIdent = new TabIdent(m_errors, 10);
    m_typeChecker = new TypeChecker(m_errors);
    m_declaration = new Declaration(m_errors, m_eventManager, m_tabIdent);
    m_expression = new Expression(m_errors, m_eventManager, m_typeChecker);
    m_affectation = new Affectation(m_errors, m_eventManager, m_tabIdent, m_typeChecker);
    m_entreeSortie = new EntreeSortie(m_errors, m_eventManager, m_tabIdent, m_typeChecker);
    m_iteration = new Iteration(m_errors, m_eventManager, m_typeChecker);
    m_branching = new Branching(m_errors, m_eventManager, m_typeChecker);
  }

  public YakaC.Event.EventManager eventManager()
  {
    return m_eventManager;
  }

  public ErrorBag errorBag()
  {
    return m_errors;
  }

  public TabIdent tabIdent()
  {
    return m_tabIdent;
  }
}

PARSER_END(Yaka)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS:
{
  public String identLu, chaineLue;
  public int entierLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);}
}


/* Mots réservés*/
TOKEN :
{
  <BOOLEEN: "BOOLEEN">
| <VAR: "VAR">
| <FAIRE: "FAIRE">
| <SINON: "SINON">
| <POUR: "POUR">
| <SI: "SI">
| <FSI: "FSI">
| <ENTIER: "ENTIER">
| <RETOURNE: "RETOURNE">
| <VRAI: "VRAI">
| <TANTQUE: "TANTQUE">
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ >
  { entierLu = Integer.parseInt(image.toString()); }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
  { identLu = image.toString(); }
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
  { chaineLue = image.toString(); }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() throws YakaException : {}
{
  <PROGRAMME> <ident> { m_eventManager.emit(Event.ProgramStart, token_source.identLu); }
  bloc()
  <FPROGRAMME> { m_eventManager.emit(Event.ProgramEnd); }
}

void bloc() throws YakaException : {}{
 (declConst())*
 (declVar())*
 { m_eventManager.emit(Event.InstructionsStart); }
   suiteInstr()
}

void declConst() throws YakaException : {}
{
  <CONST> defConst() ( "," defConst())* ";"
}

void defConst() throws YakaException : {}
{
  <ident> { m_declaration.constant(token_source.identLu); }

  "=" valConst()
}

void valConst() throws YakaException : {}{
  <entier> { m_declaration.constant(Ident.Type.Integer, token_source.entierLu); }
 | <ident> { m_declaration.constant(m_tabIdent.find(token_source.identLu)); }
 | <VRAI>  { m_declaration.constant(Ident.Type.Boolean, true); }
 | <FAUX>  { m_declaration.constant(Ident.Type.Boolean, false); }
}


void declVar() throws YakaException : {}
{
  <VAR> type()
  <ident> { m_declaration.variable(token_source.identLu); }
  (","
      <ident> { m_declaration.variable(token_source.identLu); }
  )* ";"

}

void type() : {}
{
   <ENTIER>  { m_declaration.variable(Ident.Type.Integer); }
 | <BOOLEEN> { m_declaration.variable(Ident.Type.Boolean); }
}

/*
 * Syntaxe des instructions.
 */
void suiteInstr() throws YakaException : {}
{ (instruction() (";" (instruction())? )*)? }


void instruction() throws YakaException : {}
{
  affectation()
| lecture()
| ecriture()
| iteration()
| condition()
}

void affectation() throws YakaException : {}
{
  <ident> { m_affectation.assign(token_source.identLu); }
  "="
  expression() { m_affectation.assign(); }
}

void lecture() throws YakaException : {}
{
  <LIRE> "(" <ident> ")"
  { m_entreeSortie.read(token_source.identLu); }
}

void ecriture() throws YakaException : {}
{
  <ECRIRE> "("
  (
    expression() { m_entreeSortie.write(); }
  | <chaine>     { m_entreeSortie.write(token_source.chaineLue); }
  ) ")"
| <ALALIGNE>     { m_entreeSortie.newLine(); }
}

void iteration() throws YakaException : {}
{
  <TANTQUE>      { m_iteration.beginFor(); }
    expression() { m_iteration.condition(); }
  <FAIRE>
    suiteInstr()
  <FAIT>         { m_iteration.endFor(); }
}

void condition() throws YakaException : {}
{
  <SI>           { m_branching.beginIf(); }
    expression() { m_branching.condition(); }
  <ALORS>
    suiteInstr()
 (<SINON>        { m_branching.beginElse(); }
    suiteInstr()
 )?
  <FSI>          { m_branching.endIf(); }
}

/*
 * Expression.
 */
void expression() throws YakaException : {}
{
  simpleExpr()
  (
    opRel()
    simpleExpr() { m_expression.operation(); }
  )?
}

void simpleExpr() throws YakaException : {}
{
   terme()
   (
    opAdd()
    terme() { m_expression.operation(); }
   )*
}

void terme() throws YakaException : {}
{
  facteur()
  (
    opMul()
    facteur() { m_expression.operation(); }
  )*
}

void facteur() throws YakaException : {}
{
   primaire()
 | opNeg() primaire() { m_expression.operation(); }
}

void primaire () throws YakaException: {}
{
   valeur()
 | "(" expression() ")"

}

void valeur () throws YakaException : {}
{
  <entier>
  {
   m_expression.push(Ident.Type.Integer);
   m_eventManager.emit(Event.Integer, new Integer(token_source.entierLu));
  }
| <ident>
  {
   m_expression.push(m_tabIdent.find(token_source.identLu));
   m_eventManager.emit(Event.Identifier, token_source.identLu);
  }
| <VRAI>
  {
   m_expression.push(Ident.Type.Boolean);
   m_eventManager.emit(Event.Boolean, new Boolean(true));
  }
| <FAUX>
  {
   m_expression.push(Ident.Type.Boolean);
   m_eventManager.emit(Event.Boolean, new Boolean(false));
  }
}

void opRel() : {}
{
   "="  { m_expression.push(Expression.Operator.Equals); }
 | "<>" { m_expression.push(Expression.Operator.NEquals); }
 | "<"  { m_expression.push(Expression.Operator.Lower); }
 | "<=" { m_expression.push(Expression.Operator.LowerE); }
 | ">"  { m_expression.push(Expression.Operator.Greater); }
 | ">=" { m_expression.push(Expression.Operator.GreaterE); }
}

void opAdd() : {}
{
    "+" { m_expression.push(Expression.Operator.Plus); }
  | "-" { m_expression.push(Expression.Operator.Minus); }
  | <OU> { m_expression.push(Expression.Operator.Or); }
}

void opMul() : {}
{
    "*" { m_expression.push(Expression.Operator.Times); }
  | "/" { m_expression.push(Expression.Operator.Div); }
  | <ET> { m_expression.push(Expression.Operator.And); }
}

void opNeg() : {}
{
    "-" { m_expression.push(Expression.Operator.Negate); }
  | <NON> { m_expression.push(Expression.Operator.Not); }
}


